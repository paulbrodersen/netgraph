
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "sphinx_gallery_output/plot_18_multigraphs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_sphinx_gallery_output_plot_18_multigraphs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_sphinx_gallery_output_plot_18_multigraphs.py:

Multigraphs
===========

A multigraph is a graph that is permitted to have more than one edge
with the same source and target nodes. Multigraphs are often used to
represent networks with distinct types of edges, such as, for example,
transportation networks that include different means of transportation.

This tutorial shows how to create a basic visualisation of a multigraph
and covers the different supported multigraph input formats.

.. GENERATED FROM PYTHON SOURCE LINES 14-65

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    import networkx as nx
    import igraph

    from netgraph import MultiGraph

    # define the graph
    edges = [
        (0, 0, "a"),
        (0, 1, "a"),
        (1, 1, "a"),
        (1, 1, "b"),
        (1, 2, "a"),
        (1, 2, "b"),
        (2, 0, "a"),
        (2, 0, "b"),
        (2, 0, "c"),
        (2, 2, "a"),
        (2, 2, "b"),
        (2, 2, "c"),
        (0, 3, "a"),
        (3, 0, "a"),
        (1, 3, "a"),
        (1, 3, "b"),
        (3, 1, "a"),
        (3, 1, "b"),
        (2, 3, "a"),
        (2, 3, "b"),
        (3, 2, "a"),
    ]

    # color edges according to edge key
    key_to_color = {
        "a" : "tab:blue",
        "b" : "tab:orange",
        "c" : "tab:red",
    }
    edge_color = {(source, target, key) : key_to_color[key] \
                  for (source, target, key) in edges}

    # plot
    _ = MultiGraph(
        edges,
        edge_layout="curved",
        edge_color=edge_color,
        node_labels=True,
        arrows=True,
    )




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_001.png
   :alt: plot 18 multigraphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-67

Netgraph supports a variety of different input formats:

.. GENERATED FROM PYTHON SOURCE LINES 67-79

.. code-block:: default


    # 1. Edge lists:
    # An iterable of (source node ID, target node ID, edge key) or
    # (source node ID, target node ID, edge key, weight) tuples, or
    # an equivalent (E, 3) or (E, 4)  numpy array (where E is the number of edges).
    edges = [
        (0, 1, 0),
        (0, 1, 1),
        (0, 1, 2),
    ]
    _ = MultiGraph(edges)




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_002.png
   :alt: plot 18 multigraphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-83

2. Adjacency matrices:
A (V, V, L)  numpy array, where V is the number of nodes/vertices, and L is
the number of layers. The absence of a connection is indicated by a zero.

.. GENERATED FROM PYTHON SOURCE LINES 83-89

.. code-block:: default

    adjacency = np.zeros((2, 2, 3))
    adjacency[0, 1, 0] = 1
    adjacency[0, 1, 1] = 1
    adjacency[0, 1, 2] = 1
    _ = MultiGraph(adjacency)




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_003.png
   :alt: plot 18 multigraphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

3. networkx.MultiGraph objects:

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: default

    g = nx.MultiGraph(edges)
    _ = MultiGraph(g)




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_004.png
   :alt: plot 18 multigraphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-96

4. igraph.Graph objects:

.. GENERATED FROM PYTHON SOURCE LINES 96-100

.. code-block:: default

    g = igraph.Graph([edge[:2] for edge in edges])
    g.es["id"] = [edge[2] for edge in edges]
    _ = MultiGraph(g)




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_005.png
   :alt: plot 18 multigraphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_18_multigraphs_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-104

For technical reasons, :code:`graph_tool.Graph` multigraphs are not supported,
even though plotting of :code:`graph_tool.Graph` objects is supported for non-multigraphs.
Please convert your graph-tool multigraphs to any of the supported formats before plotting.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.504 seconds)


.. _sphx_glr_download_sphinx_gallery_output_plot_18_multigraphs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_18_multigraphs.py <plot_18_multigraphs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_18_multigraphs.ipynb <plot_18_multigraphs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
