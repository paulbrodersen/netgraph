
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "sphinx_gallery_output/plot_17_multicomponent_graphs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_sphinx_gallery_output_plot_17_multicomponent_graphs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_sphinx_gallery_output_plot_17_multicomponent_graphs.py:


Graphs with Multiple Components
===============================

Many node layout algorithms are only properly defined for connected graphs,
and yield bad results when applied to graphs with multiple components.
To circumvent this issue, Netgraph computes the node layout separately for each component,
and then arranges the individual components with respect to each other using `rectangle packing`__.

.. __ : https://github.com/Penlect/rectangle-packer

.. GENERATED FROM PYTHON SOURCE LINES 14-38



.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_17_multicomponent_graphs_001.png
   :alt: plot 17 multicomponent graphs
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_17_multicomponent_graphs_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/paul/src/netgraph/examples/plot_17_multicomponent_graphs.py:37: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()






|

.. code-block:: default


    import matplotlib.pyplot as plt

    from itertools import combinations
    from netgraph import Graph

    edge_list = []

    # add 15 2-node components
    edge_list.extend([(ii, ii+1) for ii in range(30, 60, 2)])

    # add 10 3-node components
    for ii in range(60, 90, 3):
        edge_list.extend([(ii, ii+1), (ii, ii+2), (ii+1, ii+2)])

    # add a couple of larger components
    n = 90
    for ii in [10, 20, 30]:
        edge_list.extend(list(combinations(range(n, n+ii), 2)))
        n += ii

    nodes = list(range(n))
    Graph(edge_list, nodes=nodes, node_size=1, edge_width=0.3, node_layout='circular')
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.971 seconds)


.. _sphx_glr_download_sphinx_gallery_output_plot_17_multicomponent_graphs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_17_multicomponent_graphs.py <plot_17_multicomponent_graphs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_17_multicomponent_graphs.ipynb <plot_17_multicomponent_graphs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
