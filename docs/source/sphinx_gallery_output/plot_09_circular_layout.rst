
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "sphinx_gallery_output/plot_09_circular_layout.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_sphinx_gallery_output_plot_09_circular_layout.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_sphinx_gallery_output_plot_09_circular_layout.py:


Circular node layout
====================

The circular node layout routine in netgraph uses the Baur-Brandes algorithm to reduce edge crossings.

.. GENERATED FROM PYTHON SOURCE LINES 8-33

.. code-block:: default


    import matplotlib.pyplot as plt

    from netgraph import Graph

    unbalanced_tree = [
        (0, 1),
        (0, 2),
        (0, 3),
        (0, 4),
        (0, 5),
        (2, 6),
        (3, 7),
        (3, 8),
        (4, 9),
        (4, 10),
        (4, 11),
        (5, 12),
        (5, 13),
        (5, 14),
        (5, 15)
    ]
    Graph(unbalanced_tree, node_labels=True, node_layout='circular')
    plt.show()




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_001.png
   :alt: plot 09 circular layout
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/paul/src/netgraph/examples/plot_09_circular_layout.py:31: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 34-36

For large graphs, this process can be slow. To skip edge crossing minimisation,
set :code:`reduce_edge_crossings` to :code:`False`:

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    Graph(unbalanced_tree, node_labels=True,
          node_layout='circular', node_layout_kwargs=dict(reduce_edge_crossings=False))
    plt.show()




.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_002.png
   :alt: plot 09 circular layout
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/paul/src/netgraph/examples/plot_09_circular_layout.py:39: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()




.. GENERATED FROM PYTHON SOURCE LINES 42-43

You can also specify the node order directly:

.. GENERATED FROM PYTHON SOURCE LINES 43-47

.. code-block:: default


    Graph(unbalanced_tree, node_labels=True, node_layout='circular',
          node_layout_kwargs=dict(node_order=[0, 2, 4, 6, 8, 10, 12, 14, 1, 3, 5, 7, 9, 11, 13, 15]))
    plt.show()



.. image-sg:: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_003.png
   :alt: plot 09 circular layout
   :srcset: /sphinx_gallery_output/images/sphx_glr_plot_09_circular_layout_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/paul/src/netgraph/examples/plot_09_circular_layout.py:46: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown
      plt.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.616 seconds)


.. _sphx_glr_download_sphinx_gallery_output_plot_09_circular_layout.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_09_circular_layout.py <plot_09_circular_layout.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_09_circular_layout.ipynb <plot_09_circular_layout.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
